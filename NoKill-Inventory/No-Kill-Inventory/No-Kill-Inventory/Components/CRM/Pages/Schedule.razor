@page "/"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.EntityFrameworkCore
@using No_Kill_Inventory.Data
@using OfficeOpenXml
@inject ApplicationDbContext Context
@inject IHostEnvironment HostEnvironment
@inject IJSRuntime JS
@rendermode InteractiveServer

@attribute [Authorize]

<style>
    body {
        font-family: Arial, sans-serif;
        background-color: #f4f6f9;
        color: #333;
        margin: 0;
        padding: 0;
    }

    h1, h2 {
        text-align: center;
        color: #2c3e50;
    }

    .container {
        max-width: 800px;
        margin: 20px auto;
        background: #fff;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    table {
        border-collapse: collapse;
        width: 100%;
        margin: 20px 0;
    }

    th, td {
        border: 1px solid #ddd;
        text-align: left;
        padding: 12px;
    }

    th {
        background-color: #34495e;
        color: #fff;
    }

    tr:nth-child(even) {
        background-color: #f9f9f9;
    }

    button {
        background-color: #3498db;
        color: white;
        border: none;
        padding: 10px 20px;
        margin: 5px;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
        transition: background-color 0.3s;
    }

    button:hover {
        background-color: #2980b9;
    }

    button:disabled {
        background-color: #bdc3c7;
        cursor: not-allowed;
    }

    .table-container {
        overflow-x: auto;
    }
</style>

<PageTitle>Schedule</PageTitle>

<AuthorizeView>
   <div class="container" style="margin-top: 20px !important; max-width: 1000px; margin: auto; font-family: Arial, sans-serif;">
    <h1 style="text-align: center; color: #333;">Volunteers</h1>

    <div style="display: flex; flex-direction: column; align-items: center;">
        <table style="width: 100%; border-collapse: collapse; text-align: center; margin-bottom: 20px;">
            <thead>
                <tr style="background-color: #007BFF; color: white;">
                    <th style="padding: 10px;">Volunteers Count</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td style="padding: 10px; border: 1px solid #ddd;">@volunteersCount</td>
                </tr>
            </tbody>
        </table>
    </div>

    <h2 style="text-align: center; color: #333;">Volunteers Today:</h2>
    <div style="max-height: 200px; overflow-y: auto; border: 1px solid #ddd; padding: 15px; border-radius: 8px; background-color: #f9f9f9; margin-bottom: 20px;">
        <ul style="list-style: none; padding: 0; margin: 0;">
            @foreach (var volunteer in availableVolunteers)
            {
                <li style="padding: 5px; border-bottom: 1px solid #ddd;">@volunteer.Name</li>
            }
        </ul>
    </div>

    <div style="text-align: center;">
        <input @bind="volunteerName" placeholder="Enter volunteer name" 

            style="padding: 12px; width: 80%; border-radius: 5px; border: 1px solid #ccc; margin-bottom: 15px;" />
        
        <div style="display: flex; justify-content: center; gap: 10px;">
            <button @onclick="CheckInVolunteer" style="padding: 10px 15px; background-color: #7ace8e; color: white; border: none; border-radius: 5px; cursor: pointer;">Check-In</button>
            <button @onclick="CheckOutVolunteer" style="padding: 10px 15px; background-color: #c16770; color: white; border: none; border-radius: 5px; cursor: pointer;">Check-Out</button>
        </div>
        
        <button @onclick="SignOutAllVolunteers" style="margin-top: 15px; padding: 12px 20px; background-color: #6c757d; color: white; border: none; border-radius: 5px; cursor: pointer;">Sign Out All Volunteers</button>
    </div>
</div>

<div class="container" style="margin-top: 60px !important; max-width: 1000px; margin: auto; font-family: Arial, sans-serif;">
    <h1 style="text-align: center; color: #333; padding-bottom: 20px;">Recipients</h1>

    <!-- Search Input -->
    <div style="text-align: center; margin-bottom: 20px;">
        <input type="text"
       value="@searchTerm"
       @oninput="OnSearchInput"
       @onfocus="ResetToFirstPage"
       placeholder="Search by name..."
       style="padding: 8px 12px; width: 60%; border: 1px solid #ccc; border-radius: 5px;" />


    </div>

    <!-- Table -->
    <div style="border: 1px solid #ddd; padding: 15px; border-radius: 8px; background-color: #f9f9f9;">
        <table style="width: 100%; border-collapse: collapse; text-align: center;">
            <thead>
                <tr style="background-color: #007BFF; color: white;">
                    <th style="padding: 10px; border: 1px solid #ddd;">First Name</th>
                    <th style="padding: 10px; border: 1px solid #ddd;">Last Name</th>
                    <th style="padding: 10px; border: 1px solid #ddd;">Status</th>
                    <th style="padding: 10px; border: 1px solid #ddd;">Update Status</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var recipient in FilteredRecipients)
                {
                    <tr>
                        <td style="padding: 10px; border: 1px solid #ddd;">@recipient.FirstName</td>
                        <td style="padding: 10px; border: 1px solid #ddd;">@recipient.LastName</td>
                        <td style="padding: 10px; border: 1px solid #ddd;">@recipient.Status</td>
                        <td style="padding: 10px; border: 1px solid #ddd;">
                            <button @onclick="() => UpdateRecipientStatus(recipient)" 
                                style="padding: 8px 12px; background-color: #7ace8e; color: white; border: none; border-radius: 5px; cursor: pointer;">
                                Update Status
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Pagination Controls -->
    <div style="text-align: center; margin-top: 15px;">
        <button @onclick="PreviousPage" disabled="@(currentPage == 1)"
            style="padding: 8px 12px; margin-right: 10px; background-color: #a2a2a2; color: white; border: none; border-radius: 5px; cursor: pointer;">
            Previous
        </button>

        <span>Page @currentPage of @TotalPages</span>

        <button @onclick="NextPage" disabled="@(currentPage == TotalPages)"
            style="padding: 8px 12px; margin-left: 10px; background-color: #a2a2a2; color: white; border: none; border-radius: 5px; cursor: pointer;">
            Next
        </button>
    </div>
</div>

<div class="container" style="margin-top: 40px !important; max-width: 1000px; margin: auto; font-family: Arial, sans-serif;">
    <h1 style="text-align: center; color: #333; padding-bottom: 20px;">Completed Recipients</h1>
        <div style="text-align: center; margin-bottom: 20px;">
            <button @onclick="ResetAllRecipients" style="padding: 10px 15px; background-color: #6c757d; color: white; border: none; border-radius: 5px; cursor: pointer;">Reset All Recipients</button>
        </div>
    <div class="table-container">
        <table>
            <thead>
                <tr>
                    <th>First Name</th>
                    <th>Last Name</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var recipient in recipients.Where(r => r.Status == RecipientStatus.Completed))
                {
                    <tr>
                        <td>@recipient.FirstName</td>
                        <td>@recipient.LastName</td>
                        <td>@recipient.Status</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
@if (showPopup)
{
    <div style="position: fixed; top: 0; left: 0; width: 100%; height: 100%;
                background-color: rgba(0,0,0,0.5); display: flex; align-items: center; justify-content: center; z-index: 9999;">
        <div style="background-color: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.2); text-align: center;">
            <h2>Items Receiving</h2>
            <p>@(GetFormattedRecipientItems())</p>
            <button @onclick="OnPopupClose">Close</button>
        </div>
    </div>
}
</AuthorizeView>

@code {
    private int currentPage = 1;
    private int pageSize = 15;
    private int volunteersCount;
    private List<Recipient> recipients = new List<Recipient>();
    private string searchTerm = "";
    private Recipient selectedRecipient;


private string volunteerName = string.Empty;
private List<Volunteer> availableVolunteers = new List<Volunteer>();
private bool showPopup = false;

private string recipientItemsReceivingToShow;

private List<Volunteer> allVolunteers = new List<Volunteer>();

private async Task LoadAllVolunteers()
{
    allVolunteers = await Context.Volunteers.ToListAsync();
}

protected override async Task OnInitializedAsync()
{
    // Load available volunteers
    availableVolunteers = await Context.Volunteers.Where(v => v.IsAvailable).ToListAsync();
    volunteersCount = availableVolunteers.Count;
    // Load recipients from the database
    await LoadRecipientsFromDatabase();
    allVolunteers = await Context.Volunteers.ToListAsync();
}

    private async Task LoadRecipientsFromDatabase()
    {
        recipients = await Context.Recipients.ToListAsync();
    }

    private async Task AddVolunteer()
    {
        var volunteer = new Volunteer
        {
            Name = "Volunteer " + (volunteersCount + 1),
            IsAvailable = true
        };

        Context.Volunteers.Add(volunteer);
        await Context.SaveChangesAsync();

        volunteersCount++;
    }

    private async Task RemoveVolunteer()
    {
        var volunteer = await Context.Volunteers
            .FirstOrDefaultAsync(v => v.IsAvailable);

        if (volunteer != null)
        {
            volunteer.IsAvailable = false;
            await Context.SaveChangesAsync();

            volunteersCount--;
        }
    }

private async Task UpdateRecipientStatus(Recipient recipient)
{
    recipientItemsReceivingToShow = recipient.ItemsReceiving;

    if (recipient.Status == RecipientStatus.NotStarted)
    {
        //Change from NotStarted to Completed, show items listed, add the recipient's last appointment date
        recipient.Status = RecipientStatus.Completed;
        showPopup = true;
        recipient.LastAppointmentDate = DateTime.Now.ToString("MMMM dd, yyyy"); 
    }
    else
    {
        recipient.Status = RecipientStatus.NotStarted;
    }

    Context.Recipients.Update(recipient);
    await Context.SaveChangesAsync();

    recipients = await Context.Recipients.ToListAsync();
}





private async Task CheckInVolunteer()
{
    if (!string.IsNullOrWhiteSpace(volunteerName))
    {
        var existingVolunteer = await Context.Volunteers
            .FirstOrDefaultAsync(v => v.Name.ToLower() == volunteerName.ToLower());


        if (existingVolunteer == null)
        {
            var newVolunteer = new Volunteer
            {
                Name = volunteerName,
                IsAvailable = true,
                CheckInTime = DateTime.Now, 
                TotalMinutes = 0 
            };

            Context.Volunteers.Add(newVolunteer);
            availableVolunteers.Add(newVolunteer);
        }
        else if (!existingVolunteer.IsAvailable)
        {
            existingVolunteer.IsAvailable = true;
            existingVolunteer.CheckInTime = DateTime.Now; 
            existingVolunteer.TotalMinutes = 0; 
            availableVolunteers.Add(existingVolunteer);
        }

        await Context.SaveChangesAsync();

        // Update the count
        volunteersCount = availableVolunteers.Count;

        volunteerName = string.Empty;
    }
}


private async Task CheckOutVolunteer()
{
    if (!string.IsNullOrWhiteSpace(volunteerName))
    {
        var existingVolunteer = await Context.Volunteers
            .FirstOrDefaultAsync(v => v.Name.ToLower() == volunteerName.ToLower() && v.IsAvailable);


        if (existingVolunteer != null)
        {
            existingVolunteer.IsAvailable = false;

            // If they are checked in, calculate the time signed in
            if (existingVolunteer.CheckInTime.HasValue)
            {
                var sessionDuration = DateTime.Now - existingVolunteer.CheckInTime.Value;
                existingVolunteer.TotalMinutes = sessionDuration.TotalMinutes; // Save time in minutes
            }

            availableVolunteers.Remove(existingVolunteer);

            await Context.SaveChangesAsync();

            // Update the count
            volunteersCount = availableVolunteers.Count;
        }

        volunteerName = string.Empty;
    }
}



private async Task SignOutAllVolunteers()
{
    // Get all currently available volunteers
    var availableVolunteersList = await Context.Volunteers
        .Where(v => v.IsAvailable)
        .ToListAsync();

    // Mark them as unavailable 
    foreach (var volunteer in availableVolunteersList)
    {
        volunteer.IsAvailable = false;

        if (volunteer.CheckInTime.HasValue)
        {
            var sessionDuration = DateTime.Now - volunteer.CheckInTime.Value;
            volunteer.TotalMinutes += sessionDuration.TotalMinutes;
        }

        Context.Volunteers.Update(volunteer);
    }

    // Save changes to the database
    await Context.SaveChangesAsync();

    // Clear the available volunteers list 
    availableVolunteers.Clear();
    volunteersCount = availableVolunteers.Count;
}



private async Task ResetAllRecipients()
{
    // Reset all recipient statuses to "Not Started"
    foreach (var recipient in recipients)
    {
        recipient.Status = RecipientStatus.NotStarted;
        Context.Recipients.Update(recipient);
    }

    // Save changes to the database
    await Context.SaveChangesAsync();

    // Refresh the recipient list to update the UI
    recipients = await Context.Recipients.ToListAsync();
}

private IEnumerable<Recipient> PagedRecipients => recipients
        .Where(r => r.Status != RecipientStatus.Completed)
        .Skip((currentPage - 1) * pageSize)
        .Take(pageSize);

    private int TotalPages => (int)Math.Ceiling((double)AllMatchingRecipients.Count() / pageSize);


    private void NextPage()
    {
        if (currentPage < TotalPages)
            currentPage++;
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
            currentPage--;
    }



    private IEnumerable<Recipient> FilteredRecipients => AllMatchingRecipients
    .Skip((currentPage - 1) * pageSize)
    .Take(pageSize);

    private IEnumerable<Recipient> AllMatchingRecipients => recipients
        .Where(r => r.Status != RecipientStatus.Completed &&
            (string.IsNullOrWhiteSpace(searchTerm) ||
            r.FirstName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            r.LastName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            r.Status.ToString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase)));
        

    private void ResetToFirstPage()
{
    currentPage = 1;
}

private void OnSearchInput(ChangeEventArgs e)
{
    searchTerm = e.Value?.ToString() ?? "";
    ResetToFirstPage();
}

private async Task OnPopupClose()
{
    await JS.InvokeVoidAsync("printText", recipientItemsReceivingToShow);
    showPopup = false;
}


private MarkupString GetFormattedRecipientItems()
{
    if (string.IsNullOrWhiteSpace(recipientItemsReceivingToShow))
        return new MarkupString("");

    var formatted = recipientItemsReceivingToShow.Replace("\n", "<br />");
    return new MarkupString(formatted);
}

}