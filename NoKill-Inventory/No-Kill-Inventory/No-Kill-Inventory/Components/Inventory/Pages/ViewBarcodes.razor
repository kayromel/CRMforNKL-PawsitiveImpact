@page "/Inventory/ViewBarcodes"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using Microsoft.EntityFrameworkCore.Design
@using No_Kill_Inventory.Data
@inject ApplicationDbContext Context
@inject IJSRuntime JS
@rendermode InteractiveServer

@*
    Locks the page behind authentication 
*@
@attribute [Authorize]

<PageTitle>Home</PageTitle>

@* 
  <AuthorizeView> locks everything in it behind authentication
  
  This section deisplay the user's username and each table of items to see the current inventory  
*@
<AuthorizeView>
    @if (!_twostepremove)
    {
        <MudText Typo="Typo.h4">View Barcodes</MudText>

        <MudTable T="Barcode" Items="@Context.Barcodes" Hover="true" Breakpoint="Breakpoint.Sm">
            <HeaderContent>
                <MudTh>Barcode ID</MudTh>
                <MudTh>Name</MudTh>
                <MudTh>Animal</MudTh>
                <MudTh>Age Type</MudTh>
                <MudTh>Food Type</MudTh>
                <MudTh>Prescription</MudTh>
                <MudTh>Print</MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate Context="barcode">
                <MudTd DataLabel="ID">@barcode.ItemID</MudTd>
                <MudTd DataLabel="Name">@barcode.Name</MudTd>
                @if (barcode.Animal == Species.Other)
                {
                    <MudTd DataLabel="Animal">@barcode.AnimalName</MudTd>
                }
                else
                {
                    <MudTd DataLabel="Animal">@barcode.Animal</MudTd>    
                }
                <MudTd DataLabel="Age">@barcode.Age</MudTd>
                <MudTd DataLabel="Food Type">@barcode.FoodType</MudTd>
                <MudTd DataLabel="Prescription">@barcode.Prescription</MudTd>
                <MudTd>
                    <MudButton Variant="Variant.Filled" OnClick="() => Print(barcode)" Color="MudBlazor.Color.Primary">
                        <MudText>Print</MudText>
                    </MudButton>
                </MudTd>
                <MudTd>
                    <MudButton Variant="Variant.Filled" OnClick="() => ConfirmRemove(barcode.ItemID)" Color="MudBlazor.Color.Primary">
                        <MudText>Remove</MudText>
                    </MudButton>
                </MudTd>

            </RowTemplate>
        </MudTable>
        if (_success)
        {
            <MudText Color="MudBlazor.Color.Success">Success!</MudText>
        }
    }
    else if(_twostepremove)
    {
        <MudPaper Class="pa-16 ma-2" Outlined="true">
            <MudStack AlignItems="AlignItems.Center">
                <MudText Typo="Typo.h4" Color="MudBlazor.Color.Error">Remove Barcode?</MudText>
                <MudText Typo="Typo.body1" Color="MudBlazor.Color.Primary">
                    This will remove the selected barcode and it will not be recoverable. Please make sure you have selected
                    the correct entry.
                </MudText>
                <MudStack Row="true" Spacing="4">
                    <MudButton Variant="Variant.Filled" OnClick="@Remove" Color="MudBlazor.Color.Primary">
                        <MudText>Confirm</MudText>
                    </MudButton>
                    <MudButton Variant="Variant.Filled" OnClick="@GoBack" Color="MudBlazor.Color.Primary">
                        <MudText>Go Back</MudText>
                    </MudButton>
                </MudStack>
            </MudStack>
        </MudPaper>
    }

</AuthorizeView>

@code {
    private bool _success = false;
    private bool _error = false;
    private bool _twostepremove = false;
    private int SelectedBarcode;

    private void ConfirmRemove(int ID)
    {
        SelectedBarcode = ID;
        _twostepremove = true;

    }
    
    private void GoBack()
    {
        _error = false;
        _twostepremove = false;
        
    }

    private async Task Print(Barcode item)
    {
        String name = item.Name + " , Item ID: " + item.ItemID;
    
        await JS.InvokeVoidAsync("printText", name);
        
    }
    

    async Task Remove()
    {
        var entry = Context.Barcodes.FirstOrDefault(item => item.ItemID == SelectedBarcode);

        if (entry != null)
        {
            Context.Barcodes.Remove(entry);
        }

        await Context.SaveChangesAsync();
        GoBack();
    }

}